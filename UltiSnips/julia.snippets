################################################################################
# Julia Snipppets
################################################################################

################################################################################
# Global
################################################################################

global !p
"""
Function to remove all spaces and line breaks from the function definition.
"""
def julia_func_decl_oneline(func_decl):
    return re.sub( '\s+', ' ', func_decl).strip()

"""
Function to separate the arguments of the function definition.
"""
def get_julia_args(func_decl):
    # Remove all spaces and line breaks from the function definition.
    line   = julia_func_decl_oneline(func_decl)

    # Remove everything between {}.
    linep  = re.sub('{[^>{}]+}', '', line)

    # Tokenize the arguments.
    args   = ((linep.split('(',1)[1]).split(')',1)[0]).split(',')

    # Organize the arguments.
    output = ""
    if (len(args) > 1) or ( (len(args) == 1) and (len(args[0]) > 0) ):
        for a in args:
            output += "* `" + a.split('::',1)[0].strip() + "`: <++>\n"
    else:
	    output += "\n"

    return output
endglobal

################################################################################
# Function comments.
################################################################################

snippet jlc "Julia function comment"
"""
    $1`!p snip.rv = julia_func_decl_oneline(snip.v.text)`

$2

# Args

$3`!p snip.rv = get_julia_args(snip.v.text)`
# Returns

* $4

"""
${VISUAL}$0
endsnippet
